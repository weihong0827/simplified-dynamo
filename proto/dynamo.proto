syntax = "proto3";

option go_package = "dynamo/";
package dynamo;
import "google/protobuf/timestamp.proto";

service KeyValueStore {

  rpc Ping(PingRequest) returns (PingResponse) {}

  rpc Write(WriteRequest) returns (WriteResponse) {}
  rpc Read(ReadRequest) returns (ReadResponse) {}


  rpc Forward(WriteRequest) returns (WriteResponse) {}
  rpc Join(Node) returns (JoinResponse) {}
  rpc Gossip(GossipMessage) returns (GossipAck) {}

  // temporarily send the replica to other machines to store 
  rpc HintedHandoffWrite(HintedHandoffWriteRequest) returns (HintedHandoffWriteResponse) {}
  // when the node back alive again, it will send the replica back to the node
  rpc SendReplica(BulkWriteRequest) returns (WriteResponse) {}

  rpc Delete(ReplicaDeleteRequest) returns (Empty) {}
  rpc BulkWrite(BulkWriteRequest) returns (Empty) {}

  rpc Transfer(ReplicaTransferRequest) returns (Empty){}

  rpc KillNode(Empty) returns (Empty){}
  rpc ReviveNode(Empty) returns (Empty){}
  
}


message Empty {}

message KeyValue {
  string key = 1;
  string value = 2;
  VectorClock vector_clock = 3;
}

message ReplicaTransferRequest{
  uint32 start = 1;
  uint32 end = 2;
  Node target = 3;
}

message ReplicaDeleteRequest {
  uint32 start = 1;
  uint32 end = 2;
  // Need to update the target client to the new membershipList
  MembershipList membershipList = 3;
}


message ClockStruct {
  int64 clokcVal = 1;
  google.protobuf.Timestamp timestamp = 2;
}

message VectorClock {
  map<uint32, ClockStruct> timestamps = 1; // Map to hold the vector clock data
}

message BulkWriteRequest {
  repeated KeyValue keyValue = 1;
}

message HintedHandoffWriteRequest {
  KeyValue keyValue = 1;
  uint32 nodeid = 2;
}

message HintedHandoffWriteResponse {
  map<uint32,KeyValue >keyValue = 1;
  uint32 nodeid = 3;
  bool success = 2;
}

message HintedHandoffList {
  repeated HintedHandoffWriteRequest requests = 1;
}

message WriteRequest {
  KeyValue keyValue = 1;
  bool isReplica = 2;
}

message WriteResponse {
  map<uint32,KeyValue> keyValue = 1;
  bool success = 2;
  string message = 3;
}
message JoinResponse{
  repeated KeyValue data= 1;
  MembershipList membershipList= 2;
}

message ReadRequest {
  string key = 1;
  bool isReplica = 2;
  
}

message ReadResponse {
  map<uint32,KeyValue> keyValue = 1;
  bool success = 2;
  string message = 3;
}

message GossipMessage {
  MembershipList membershipList = 1;
}

message GossipAck {
  bool success = 1;
  string message = 2;
  MembershipList membershipList = 3;
}

message MembershipList {
  repeated Node nodes = 1;
}

message Node {
  uint32 id = 1;
  string address = 2;
  bool isAlive = 3;
  google.protobuf.Timestamp timestamp = 4;
}

message PingRequest {
  string message = 1;
}

message PingResponse {
  string message = 1;
}
